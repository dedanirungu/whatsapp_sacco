<div class="container mt-4">
  <h1 class="mb-4">{{title}}</h1>
  
  {{#if error}}
    <div class="alert alert-danger" role="alert">
      {{error}}
    </div>
  {{/if}}

  <div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Transactions</h5>
      <div>
        <div class="dropdown d-inline-block me-2">
          <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            {{#if filterType}}
              Filter: {{filterType}}
            {{else}}
              Filter by type
            {{/if}}
          </button>
          <ul class="dropdown-menu" aria-labelledby="filterDropdown">
            <li><a class="dropdown-item" href="/transactions">All Transactions</a></li>
            <li><a class="dropdown-item" href="/transactions/type/deposit">Deposits</a></li>
            <li><a class="dropdown-item" href="/transactions/type/withdrawal">Withdrawals</a></li>
            <li><a class="dropdown-item" href="/transactions/type/loan">Loans</a></li>
            <li><a class="dropdown-item" href="/transactions/type/repayment">Repayments</a></li>
          </ul>
        </div>
        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#newTransactionModal">
          New Transaction
        </button>
      </div>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-striped table-hover">
          <thead>
            <tr>
              <th>ID</th>
              <th>Member</th>
              <th>Type</th>
              <th>Amount</th>
              <th>Description</th>
              <th>Date</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {{#if transactions.length}}
              {{#each transactions}}
                <tr>
                  <td>{{this.id}}</td>
                  <td>
                    {{#if this.Member}}
                      <a href="/members/{{this.Member.id}}">{{this.Member.name}}</a>
                    {{else}}
                      Unknown
                    {{/if}}
                  </td>
                  <td>
                    {{#if (eq this.type "deposit")}}
                      <span class="badge bg-success">Deposit</span>
                    {{else if (eq this.type "withdrawal")}}
                      <span class="badge bg-danger">Withdrawal</span>
                    {{else if (eq this.type "loan")}}
                      <span class="badge bg-primary">Loan</span>
                    {{else if (eq this.type "repayment")}}
                      <span class="badge bg-info">Repayment</span>
                    {{else}}
                      <span class="badge bg-secondary">{{this.type}}</span>
                    {{/if}}
                  </td>
                  <td>{{formatCurrency this.amount}}</td>
                  <td>{{this.description}}</td>
                  <td>{{formatDate this.timestamp}}</td>
                  <td>
                    <a href="/transactions/{{this.id}}" class="btn btn-sm btn-info">View</a>
                  </td>
                </tr>
              {{/each}}
            {{else}}
              <tr>
                <td colspan="7" class="text-center">No transactions found</td>
              </tr>
            {{/if}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- New Transaction Modal -->
<div class="modal fade" id="newTransactionModal" tabindex="-1" aria-labelledby="newTransactionModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newTransactionModalLabel">New Transaction</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="transactionForm" action="/api/transactions" method="POST">
          <div class="mb-3">
            <label for="member_id" class="form-label">Member</label>
            <select class="form-select" id="member_id" name="member_id" required>
              <option value="">Select Member</option>
              <!-- This would be populated with members -->
            </select>
          </div>
          <div class="mb-3">
            <label for="type" class="form-label">Transaction Type</label>
            <select class="form-select" id="type" name="type" required>
              <option value="">Select Type</option>
              <option value="deposit">Deposit</option>
              <option value="withdrawal">Withdrawal</option>
              <option value="loan">Loan</option>
              <option value="repayment">Repayment</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="amount" class="form-label">Amount</label>
            <div class="input-group">
              <span class="input-group-text">$</span>
              <input type="number" class="form-control" id="amount" name="amount" step="0.01" min="0" required>
            </div>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" form="transactionForm" class="btn btn-primary">Save Transaction</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Fetch members to populate the select dropdown
    fetch('/api/members')
      .then(response => response.json())
      .then(members => {
        const selectElement = document.getElementById('member_id');
        members.forEach(member => {
          const option = document.createElement('option');
          option.value = member.id;
          option.textContent = member.name;
          selectElement.appendChild(option);
        });
      })
      .catch(error => console.error('Error fetching members:', error));
    
    // Submit form via API and redirect
    document.getElementById('transactionForm').addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const data = Object.fromEntries(formData.entries());
      
      fetch('/api/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Redirect to the transactions page after successful creation
        window.location.href = '/transactions';
      })
      .catch(error => {
        console.error('Error creating transaction:', error);
        alert('Failed to create transaction. Please try again.');
      });
    });
  });
</script>